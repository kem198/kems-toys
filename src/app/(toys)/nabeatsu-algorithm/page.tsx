import StyledMarkdown from '@/components/Atoms/StyledMarkdown';
import Version from '@/components/Atoms/Version';
import NabeatsuCalc from '@/components/Organisms/NabeatsuCalc';

const bodySource = `
# ナベアツ アルゴリズム

与えられた自然数 n について「**(A) 3 の倍数である**」または「**(B) 3 を含む桁が存在する**」のいずれかの条件を満たせば \`[数値]!!!\` と出力する。
`;

const supplementSource = `
評価について補足:

計算処理の作成にあたり、文字列として評価することは禁止とし、数値のまま計算を行うこととしている。文字列評価の場合簡単すぎるため。

(A) については n を 3 で割り、余剰が 0 であれば真と評価する。

(B) については n の桁ごとに 3 と一致するか評価していく。手続き的には次の処理を行っている。

1. 与えられた数値の最大の桁の重み (※1) を求める。
    - 例) 1234 ⇒ 1000
    - 桁の重みは、常用対数 (※2) の解の整数部を求め、これを 10 にべき乗すると求まる。
        - 例) \`log_10 1234 = 3.091...\` ⇒ \`10^3 = 1000\`
2. n を桁の重みで割り、余剰を省いた商を求める。
    - 商が 3 であれば評価を真とし処理を終了する。
    - 商が 3 でなければ桁の重みをひとつ減らして再度求める。
    - 例)
        - 1 巡目: \`1234 / 1000 = 1.234\` ⇒ 千の位は 3 でない。n を 234, 重みを 100 として次へ。
        - 2 巡目: \`234 / 100 = 2.34\` ⇒ 百の位は 3 でない。n を 34, 重みを 10 として次へ。
        - 3 巡目: \`34 / 10 = 3.4\` ⇒ 十の位は 3 である。真と評価して処理を終了する。
3. このように桁ごとに評価していき、最後まで一致することがなければ最終的な評価を偽として終了する。

- (※1)「桁の重み」…… 各桁の単位のこと。「十の位」の「十 (10)」がそれにあたる。上記の例であれば「1234」なので、最大の桁の重みは「千 (1000)」。
- (※2)「対数 (\`log\`)」…… 「N = x^p」とした場合の p のこと。「N は x の何乗なのか？」を表現しており、数式で表すと \`log_x N = p\` となる。上記の例であれば \`log_10 1234 = 3.091...\` (1234 は 10 の約 3 乗) という感じ。なおこの x のことを「底」と言い、特に底が 10 である対数を「常用対数」と呼ぶ。
`;

export default function Page() {
  return (
    <article>
      <StyledMarkdown source={bodySource} />
      <NabeatsuCalc />
      <div className="divider" />
      <StyledMarkdown source={supplementSource} />
      <Version version="0.1.0" onDate="2024-05-07" />
    </article>
  );
}
